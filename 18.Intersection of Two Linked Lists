/****************************************************************

    Following is the class structure of the Node class:

        class Node
        {
        public:
            int data;
            Node *next;
            Node()
            {
                this->data = 0;
                next = NULL;
            }
            Node(int data)
            {
                this->data = data;
                this->next = NULL;
            }
            Node(int data, Node* next)
            {
                this->data = data;
                this->next = next;
            }
        };

*****************************************************************/

Node* findIntersection(Node* headA, Node* headB) {
    Node* a = headA;
    Node* b = headB;

    int lenA = 0, lenB = 0;

    // Calculate the lengths of the two linked lists
    while (a != nullptr) {
        lenA++;
        a = a->next;
    }

    while (b != nullptr) {
        lenB++;
        b = b->next;
    }

    // Reset pointers to the head of each list
    a = headA;
    b = headB;

    // Adjust the starting point of the longer list
    if (lenA > lenB) {
        int diff = lenA - lenB;
        while (diff--) {
            a = a->next;
        }
    } else {
        int diff = lenB - lenA;
        while (diff--) {
            b = b->next;
        }
    }

    // Traverse both lists until they intersect
    while (a != b) {
        a = a->next;
        b = b->next;
    }




Using MAP

   ListNode* a = headA;
    ListNode* b = headB;

    unordered_map<ListNode*, int> mp;

    while (a != NULL) {
        mp[a]++;
        if (mp[a] > 1) {
            return a;
        }
        a = a->next;
    }

    while (b != NULL) {
        mp[b]++;
        if (mp[b] > 1) {
            return b;
        }
        b = b->next;
    }

    return NULL; 
    return a; // Return the intersection node (or null if there is no intersection)
}
