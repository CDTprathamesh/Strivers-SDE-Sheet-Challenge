 #include <bits/stdc++.h> 
// /************************************************************

//     Following is the Binary Tree node structure:

//     class BinaryTreeNode
//     {
//     public :
//         T data;
//         BinaryTreeNode<T> *left;
//         BinaryTreeNode<T> *right;

//         BinaryTreeNode(T data) {
//             this -> data = data;
//             left = NULL;
//             right = NULL;
//         }
//     };


// ************************************************************/
  void Inorder(BinaryTreeNode<int>* root, vector<int>& v) {
    if (root == NULL)
        return ;
    Inorder(root->left, v);
    v.push_back(root->data);
    Inorder(root->right, v);
    
}

void preorder(BinaryTreeNode<int>* root, vector<int>& v) {
    if (root == NULL)
        return ;
    v.push_back(root->data);
    preorder(root->left, v);
    preorder(root->right, v);
    
}

void postorder(BinaryTreeNode<int>* root, vector<int>& v) {
    if (root == NULL)
        return ;
    postorder(root->left, v);
    postorder(root->right, v);
    v.push_back(root->data);
    
}

vector<vector<int>> getTreeTraversal(BinaryTreeNode<int>* root) {
    vector<int> ans1, ans2, ans3;
     Inorder(root, ans1);
    preorder(root, ans2);
    postorder(root, ans3);

    vector<vector<int>> final_result;
    final_result.push_back(ans1);
    final_result.push_back(ans2);
    final_result.push_back(ans3);

    return final_result;
}


 
